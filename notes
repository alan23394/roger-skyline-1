###############################################################################
### Initial Setup
###############################################################################

-------------------------------------------------------------------------------
Before anything
Host:
	Make SSH key with ssh-keygen
VM:
	Create the virtual machine
		2gb ram, 8gb storage

-------------------------------------------------------------------------------
VM initial arch install
	Connected to internet already because dhcpcd
	Test with ping
	Run these commands to partition
		parted
		mklabel msdos
		mkpart primary 1MiB 4250MiB			# root partition, 4.2 gb
		mkpart primary 4250MiB 6250MiB		# swap partition, 2 gb
		mkpart primary 6250MiB -1s			# home partition, remaining space
			(-1s specifies the last sector, `help mkpart` in parted for more)
	With these values, the command `lsblk` shows the correct sizes
	Run these commands to format them properly
		mkfs.ext4 /dev/sda1
		mkfs.ext4 /dev/sda3
		mkswap /dev/sda2
		swapon /dev/sda2
	These commands will mount them properly for installing the system
		mount /dev/sda1 /mnt
		mkdir /mnt/home
		mount /dev/sda3 /mnt/home
	To install the base system with additional important packages, run
		pacstrap /mnt base grub sudo openssh
	Generate the filesystem mounting table
		genfstab -U -p /mnt >> /mnt/etc/fstab
	Chroot for configuring the base system
		arch-chroot /mnt
	Setting locale and timezone
		vi /etc/locale.gen
			uncomment line with en_US.UTF-8 UTF-8
		locale-gen
		echo LANG=en_US.UTF-8 > /etc/locale.conf
		export LANG=en_US.UTF-8
		ln -s /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
	Hostname setup
		echo [your hostname] > /etc/hostname
		vi /etc/hosts
			add these lines to the file, filling in [your hostname]
			#<ip-address>	<hostname>
			127.0.0.1		localhost
			127.0.1.1		[your hostname]
	Set root password
		passwd
	Set up bootloader
		grub-install /dev/sdX
			just the drive, not a partition
		grub-mkconfig -o /boot/grub/grub.cfg

THINGS INSTALLED
	base grub sudo openssh
base:
	group which contains all packages for the base system
grub:
	bootloader
sudo:
	user privelage escalator
openssh:
	SSH daemon, for logging into the server from the network


###############################################################################
### VM Part
###############################################################################

-------------------------------------------------------------------------------
• A disk size of 8 GB.

Easy, make the vm in virtual box 8gb in size.

-------------------------------------------------------------------------------
• Have at least one 4.2 GB partition.

While partitioning the linux OS, make the root partition 4.2 gb. This makes
sense, because it'll need the most space. The remaining space should be used as
follows:
-a swap partition that's the same size as your ram (at least 1gb, ideally 2)
-rest spent on home partition, the user won't have many files anyway
The commands that do this are above, in the arch install section

-------------------------------------------------------------------------------
• It will also have to be up to date as well as the whole packages installed to
meet the demands of this subject.

To update everything, run this command:
	pacman -Syu
This checks for repository updates, and downloads and installs any new packages


###############################################################################
### Network and Security Part
###############################################################################

-------------------------------------------------------------------------------
• You must create a non-root user to connect to the machine and work.

Create a new user with the command:
	useradd -m -G wheel -s /bin/bash (username)
		-m: create their home directory
		-G: additional groups
			wheel is used because it is the group that is given sudo access.
		-s: login shell
Set their password with this:
	passwd (username)

Resources:
https://wiki.archlinux.org/index.php/Users_and_groups#Group_list
https://linux.die.net/man/8/useradd

-------------------------------------------------------------------------------
• Use sudo, with this user, to be able to perform operation requiring special
rights.

This step must be done as root.
Sudo should be installed during the linux setup
If not, install it with this:
	pacman -S sudo
Give user sudo access
	visudo
		uncomment line 82, or right below the line that says:
		Uncomment to allow members of group wheel to execute any command
Since the user was added into the wheel group, this gives them sudo access

-------------------------------------------------------------------------------
• We don’t want you to use the DHCP service of your machine. You’ve got to
configure it to have a static IP and a Netmask in \30.

Create the netctl profile nat-static
	sudo netctl edit nat-static
Give it these lines:
	Description='Static IP config for the NAT network adapter'
	Interface=enp0s3
	Connection=ethernet
	IP=static
	Address=('10.0.2.1/30')
	Gateway='10.0.2.2'
	DNS=('10.51.1.253')
Make sure netctl is started
	sudo systemctl start netctl
Start the profile like this:
	sudo netctl start nat-static
To have this profile run on startup, do these things
	sudo systemctl enable netctl
	sudo netctl enable nat-static

Resources:
https://wiki.archlinux.org/index.php/Network_configuration
https://www.linux.com/tutorials/introduction-ss-command/
https://www.control4.com/blog/61/dhcp-vs-static-ip-which-is-better/
https://support.microsoft.com/en-us/help/164015/understanding-tcp-ip-addressing-and-subnetting-basics
http://www.steves-internet-guide.com/subnetting-subnet-masks-explained/
https://www.aelius.com/njh/subnet_sheet.html
https://www.thomas-krenn.com/en/wiki/Network_Configuration_in_VirtualBox
https://serverfault.com/questions/460663/is-it-necessary-to-manually-set-the-interface-broadcast-address
https://www.cyberciti.biz/faq/howto-linux-configuring-default-route-with-ipcommand/
https://bbs.archlinux.org/viewtopic.php?id=243382
https://wiki.archlinux.org/index.php/Netctl

-------------------------------------------------------------------------------
• You have to change the default port of the SSH service by the one of your
choice. SSH access HAS TO be done with publickeys. SSH root access SHOULD NOT
be allowed directly, but with a user who can be root.

VM:
	Openssh should be installed during the linux setup
	If not, install it with this:
		sudo pacman -S openssh
	Edit the /etc/ssh/sshd_config file
		sudo vi /etc/ssh/sshd_config
			change Port to a number between 1024 and 49151
				ex. Port 2222
			change PermitRootLogin to no
			change PubkeyAuthentication to yes
	Make the ~/.ssh folder
	Start and enable sshd
		sudo systemctl start sshd
		sudo systemctl enable sshd
Host:
	For your vm, go to settings > network
	Make sure the network is set to NAT
	Under advanced, add a port forwarding rule
		Map a port on your host ([host port] from now on) to 2222
	SSH into the vm to make sure it works:
		ssh alan@localhost -p [host port]
			(could also use 127.0.0.1 instead of localhost)
	If it works, scp your public key to the vm's ~/.ssh/authorized_keys file
		scp -P [host port] ~/.ssh/key.pub alan@localhost:~/.ssh/authorized_keys
VM:
	Edit /etc/ssh/sshd_config again
		sudo vi /etc/ssh/sshd_config
			change PasswordAuthentication to no
	Restart the SSH daemon
		sudo systemctl restart sshd
Host:
	SSH into the machine with your private key now
		ssh alan@localhost -p [host port] -i ~/.ssh/[privkey]
	If this works, then you have successfully completed this bullet point
	You can make an entry in the ~/.ssh/config file for ease later
	Add these lines:
		## Roger Skyline 1 ##
		Host roger
			HostName 127.0.0.1
			User [vm username]
			Port [host port]
			IdentityFile ~/.ssh/rogerskyline

Resources:
https://en.wikipedia.org/wiki/Port_(computer_networking)

-------------------------------------------------------------------------------
• You have to set the rules of your firewall on your server only with the
services used outside the VM.
• You have to set a DOS (Denial Of Service Attack) protection on your open
ports of your VM.
• You have to set a protection against scans on your VM’s open ports.

Host:
	SCP the file kernel-settings into the virtual machine
		scp kernel-settings roger:~
	SCP the file ip-tables-rules into the virtual machine
		scp ip-tables-rules roger:~
VM:
	To apply the kernel settings
		sudo mv ~/kernel-settings /etc/sysctl.conf
		sudo sysctl -p
	To apply the ip-tables-rules
		sudo sh ~/ip-tables-rules
		sudo iptables-save -f /etc/iptables/iptables.rules
	To start and enable iptables:
		systemctl start iptables
		systemctl enable iptables

Resources:
https://wiki.archlinux.org/index.php/Iptables
https://wiki.archlinux.org/index.php/Simple_stateful_firewall
https://javapipe.com/blog/iptables-ddos-protection/

-------------------------------------------------------------------------------
• Stop the services you don’t need for this project.

There aren't any running/enabled that aren't necessary.
If there were, you would stop them like this:
	sudo systemctl stop [servicename]
If you wanted to stop them from running at startup, you would disable them:
	sudo systemctl disable [servicename]

Resources:
https://askubuntu.com/questions/795226/how-to-list-all-enabled-services-from-systemctl

-------------------------------------------------------------------------------
• Create a script that updates all the sources of package, then your packages
and which logs the whole in a file named /var/log/update_script.log. Create a
scheduled task for this script once a week at 4AM and every time the machine
reboots.

-------------------------------------------------------------------------------
• Make a script to monitor changes of the /etc/crontab file and sends an email
to root if it has been modified. Create a scheduled script task every day at
midnight.

Mail setup
	Add these lines to enable local mail into /etc/postfix/main.cf
		myhostname = localhost
		mydomain = localdomain
		mydestination = $myhostname, localhost.$mydomain, localhost
		inet_interfaces = $myhostname, localhost
		mynetworks_style = host
		default_transport = error: outside mail is not deliverable
	Set up the aliases database
		sudo postalias /etc/postfix/aliases
	Start and enable postfix
		sudo systemctl start postfix
		sudo systemctl enable postfix

Resources:
https://wiki.archlinux.org/index.php/Postfix#Local_mail
https://wiki.archlinux.org/index.php/Postfix#Aliases
